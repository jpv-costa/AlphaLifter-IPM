{"version":3,"sources":["Animations.ts"],"names":["React","Animated","Easing","useMemoOne","min","timing","Value","set","add","multiply","cond","eq","abs","sub","interpolate","divide","useCode","not","defined","neq","diff","lessThan","greaterThan","moving","position","minPositionDelta","emptyFrameThreshold","delta","noMovementFrames","snapPoint","value","velocity","points","point","diffPoint","p","deltas","map","minDelta","reduce","acc","bInterpolate","origin","destination","inputRange","outputRange","translateZ","perspective","z","scale","transformOrigin","x","y","transformations","translateX","translateY","useTransition","state","src","dest","duration","easing","linear","useMemo","Error","transitionVal","from","to","useToggle","toggle"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport Animated, { Easing } from \"react-native-reanimated\";\nimport { useMemoOne } from \"use-memo-one\";\n\nimport { TransformsStyle } from \"react-native\";\nimport { min } from \"./Math\";\nimport { timing } from \"./AnimationRunners\";\n\nconst {\n  Value,\n  set,\n  add,\n  multiply,\n  cond,\n  eq,\n  abs,\n  sub,\n  interpolate,\n  divide,\n  useCode,\n  not,\n  defined,\n  neq,\n  diff,\n  lessThan,\n  greaterThan\n} = Animated;\n\ntype AnimatedTransform = {\n  [P in keyof TransformsStyle[\"transform\"]]: Animated.Adaptable<\n    TransformsStyle[\"transform\"][P]\n  >\n};\n\nexport const moving = (\n  position: Animated.Node<number>,\n  minPositionDelta: number = 1e-3,\n  emptyFrameThreshold: number = 5\n) => {\n  const delta = diff(position);\n  const noMovementFrames = new Value(0);\n  return cond(\n    lessThan(abs(delta), minPositionDelta),\n    [\n      set(noMovementFrames, add(noMovementFrames, 1)),\n      not(greaterThan(noMovementFrames, emptyFrameThreshold))\n    ],\n    [set(noMovementFrames, 0), 1]\n  );\n};\n\nexport const snapPoint = (\n  value: Animated.Adaptable<number>,\n  velocity: Animated.Adaptable<number>,\n  points: Animated.Adaptable<number>[]\n) => {\n  const point = add(value, multiply(0.2, velocity));\n  const diffPoint = (p: Animated.Adaptable<number>) => abs(sub(point, p));\n  const deltas = points.map(p => diffPoint(p));\n  const minDelta = min(...deltas);\n  return points.reduce(\n    (acc, p) => cond(eq(diffPoint(p), minDelta), p, acc),\n    new Value()\n  );\n};\n\nexport const bInterpolate = (\n  value: Animated.Adaptable<number>,\n  origin: Animated.Adaptable<number>,\n  destination: Animated.Adaptable<number>\n) =>\n  interpolate(value, {\n    inputRange: [0, 1],\n    outputRange: [origin, destination]\n  });\n\nexport const translateZ = (\n  perspective: Animated.Adaptable<number>,\n  z: Animated.Adaptable<number>\n) => ({ scale: divide(perspective, sub(perspective, z)) });\n\nexport const transformOrigin = (\n  x: Animated.Adaptable<number> = 0,\n  y: Animated.Adaptable<number> = 0,\n  ...transformations: AnimatedTransform[]\n): AnimatedTransform[] => [\n  { translateX: x },\n  { translateY: y },\n  ...transformations,\n  { translateX: multiply(x, -1) },\n  { translateY: multiply(y, -1) }\n];\n\nexport const useTransition = <T extends unknown>(\n  state: T,\n  src: Animated.Adaptable<number>,\n  dest: Animated.Adaptable<number>,\n  duration: number = 400,\n  easing: Animated.EasingFunction = Easing.linear\n) => {\n  if (!React.useMemo) {\n    throw new Error(\n      \"useTransition() is only available in React Native 0.59 or higher.\"\n    );\n  }\n  const { transitionVal } = useMemoOne(\n    () => ({\n      transitionVal: new Value() as Animated.Value<number>\n    }),\n    []\n  );\n  useCode(\n    cond(\n      not(defined(transitionVal)),\n      set(transitionVal, src),\n      cond(\n        neq(transitionVal, src),\n        set(\n          transitionVal,\n          timing({\n            from: dest,\n            to: src,\n            duration,\n            easing\n          })\n        )\n      )\n    ),\n    [state]\n  );\n  return transitionVal;\n};\n\nexport const useToggle = (\n  toggle: boolean,\n  duration: number = 400,\n  easing: Animated.EasingFunction = Easing.linear\n) =>\n  useTransition(toggle, toggle ? 1 : 0, not(toggle ? 1 : 0), duration, easing);\n"]}