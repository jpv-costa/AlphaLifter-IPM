import Animated from "react-native-reanimated";
export interface TimingParams {
    clock?: Animated.Clock;
    from?: Animated.Adaptable<number>;
    to?: Animated.Adaptable<number>;
    duration?: Animated.Adaptable<number>;
    easing?: Animated.EasingFunction;
}
export declare const timing: (params: TimingParams) => Animated.Node<number>;
export interface DecayParams {
    clock?: Animated.Clock;
    from?: Animated.Adaptable<number>;
    velocity?: Animated.Value<number>;
    deceleration?: Animated.Adaptable<number>;
}
export declare const decay: (params: DecayParams) => Animated.Node<number>;
export declare type SpringConfig = Partial<Omit<Animated.SpringConfig, "toValue">>;
export interface SpringParams {
    clock?: Animated.Clock;
    from?: Animated.Adaptable<number>;
    to: Animated.Adaptable<number>;
    velocity?: Animated.Value<number>;
    config?: SpringConfig;
}
export declare const spring: (params: SpringParams) => Animated.Node<number>;
export declare const delay: (node: Animated.Node<number>, duration: number) => Animated.Node<number>;
export interface LoopProps {
    clock?: Animated.Clock;
    easing?: Animated.EasingFunction;
    duration?: number;
    boomerang?: boolean;
    autoStart?: boolean;
}
export declare const loop: (loopConfig: LoopProps) => Animated.Node<number>;
export declare const toggle: (params: {
    clock?: Animated.Clock | undefined;
    toggleState: Animated.Value<number>;
    duration?: number | undefined;
    from: Animated.Adaptable<number>;
    to: Animated.Adaptable<number>;
    easing?: Animated.EasingFunction | undefined;
    value: Animated.Value<number>;
}) => Animated.Node<number>[];
